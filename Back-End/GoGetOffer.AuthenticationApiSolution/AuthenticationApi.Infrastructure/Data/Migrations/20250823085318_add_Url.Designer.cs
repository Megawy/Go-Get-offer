// <auto-generated />
using System;
using AuthenticationApi.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthenticationApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AuthenticationDbContext))]
    [Migration("20250823085318_add_Url")]
    partial class add_Url
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthenticationApi.Domain.Entites.Auth.AuthenticationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatusConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("AuthenticationUser");
                });

            modelBuilder.Entity("AuthenticationApi.Domain.Entites.Auth.AuthenticationUserUpdateRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DecisionAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsApproved")
                        .HasColumnType("int");

                    b.Property<string>("NewCompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuthenticationUserUpdateRequests");
                });

            modelBuilder.Entity("AuthenticationApi.Domain.Entites.Supplier.SuppilerProfileUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DecisionAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("NewAddressDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewGovernorate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SupplierProfilesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserComment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierProfilesId");

                    b.ToTable("SuppilerProfileUpdates");
                });

            modelBuilder.Entity("AuthenticationApi.Domain.Entites.Supplier.SupplierBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressDetails")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Main_Branch")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("SupplierProfilesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SupplierProfilesId");

                    b.ToTable("SupplierBranches");
                });

            modelBuilder.Entity("AuthenticationApi.Domain.Entites.Supplier.SupplierJoinRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DecisionAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("RequestedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("SupplierProfilesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SupplierProfilesId");

                    b.ToTable("SupplierJoinRequests");
                });

            modelBuilder.Entity("AuthenticationApi.Domain.Entites.Supplier.SupplierProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CommercialRegistrationDocumentPublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialRegistrationDocumentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryTimeInDays")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("HasDeliveryService")
                        .HasColumnType("bit");

                    b.Property<bool>("HasElctroinInvoice")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxProducts")
                        .HasColumnType("int");

                    b.Property<decimal?>("MinInvoiceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MinProducts")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxCardDocumentPublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxCardDocumentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("AuthenticationApi.Domain.Entites.Auth.AuthenticationUserUpdateRequest", b =>
                {
                    b.HasOne("AuthenticationApi.Domain.Entites.Auth.AuthenticationUser", "User")
                        .WithMany("AuthenticationUserUpdateRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationApi.Domain.Entites.Supplier.SuppilerProfileUpdate", b =>
                {
                    b.HasOne("AuthenticationApi.Domain.Entites.Supplier.SupplierProfile", "SupplierProfile")
                        .WithMany("ProfileSuppilerUpdates")
                        .HasForeignKey("SupplierProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierProfile");
                });

            modelBuilder.Entity("AuthenticationApi.Domain.Entites.Supplier.SupplierBranch", b =>
                {
                    b.HasOne("AuthenticationApi.Domain.Entites.Supplier.SupplierProfile", "SupplierProfiles")
                        .WithMany("SupplierBranches")
                        .HasForeignKey("SupplierProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierProfiles");
                });

            modelBuilder.Entity("AuthenticationApi.Domain.Entites.Supplier.SupplierJoinRequest", b =>
                {
                    b.HasOne("AuthenticationApi.Domain.Entites.Supplier.SupplierProfile", "SupplierProfiles")
                        .WithMany("SuppliersJoinRequests")
                        .HasForeignKey("SupplierProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierProfiles");
                });

            modelBuilder.Entity("AuthenticationApi.Domain.Entites.Supplier.SupplierProfile", b =>
                {
                    b.HasOne("AuthenticationApi.Domain.Entites.Auth.AuthenticationUser", "User")
                        .WithOne("SupplierProfile")
                        .HasForeignKey("AuthenticationApi.Domain.Entites.Supplier.SupplierProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationApi.Domain.Entites.Auth.AuthenticationUser", b =>
                {
                    b.Navigation("AuthenticationUserUpdateRequests");

                    b.Navigation("SupplierProfile");
                });

            modelBuilder.Entity("AuthenticationApi.Domain.Entites.Supplier.SupplierProfile", b =>
                {
                    b.Navigation("ProfileSuppilerUpdates");

                    b.Navigation("SupplierBranches");

                    b.Navigation("SuppliersJoinRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
